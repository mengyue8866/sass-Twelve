//定义.col对应的样式，为什么不和float一样的方式来实现？
@mixin make-grid-columns($i:1,$list:".col-xs-#{$i},.col-sm-#{$i},.col-md-#{$i},.col-lg-#{$i}"){
	@for $i from (1+1) through $grid-columns{
		$list:"#{$list},.col-xs-#{$i},.col-sm-#{$i},.col-md-#{$i},.col-lg-#{$i}";
	}
	#{$list}{
		position: relative;
		min-height: 1px;
		padding-left:($grid-gutter-width/2);
		padding-right:($grid-gutter-width/2);
	}
}
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}"){
	@for $i from (1) through $grid-columns{
		$list:"#{$list},.col-#{$class}-#{$i}";
	}
	#{$list}{
		float:left;
	}
}

@mixin make-grid($class){
	@include float-grid-columns($class);
	@for $i from 0 through $grid-columns{
		@include calc-grid-column($i,$class,width);
	}
	@for $i from 0 through $grid-columns{
		@include calc-grid-column($i,$class,push);
	}
	@for $i from 0 through $grid-columns{
		@include calc-grid-column($i,$class,pull);
	}
	@for $i from 0 through $grid-columns{
		@include calc-grid-column($i,$class,offset);
	}
}

@mixin calc-grid-column($index,$class,$type){
	@if (($type==width) and ($index>0)){
		.col-#{$class}-#{$index}{
			width:percentage($index/$grid-columns);
		}
	}
	@if (($type==push) and ($index>0)){
		.col-#{$class}-#{$type}-#{$index}{
			left:percentage($index/$grid-columns);
		}
	}
	@if (($type==pull) and ($index>0)){
		.col-#{$class}-#{$type}-#{$index}{
			right:percentage($index/$grid-columns);
		}
	}
	@if (($type==offset) and ($index>0)){
		.col-#{$class}-#{$type}-#{$index}{
			margin-left:percentage($index/$grid-columns);
		}
	}
}